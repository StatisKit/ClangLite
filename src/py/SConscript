# -*-python-*-

import os
import sys
import itertools
from distutils import sysconfig

operating_system = os.name.lower()
platform = sys.platform.lower()

Import("env")

pyenv = env.Clone()

targets = list(itertools.chain(*[pyenv.SharedObject(None, source) for source in pyenv.Glob('*.cpp')]))
source = pyenv.File('response_file.rsp')
with open(source.abspath, 'w') as filehandler:
    filehandler.write(' '.join(target.abspath.replace('\\','/') + ' ' for target in targets))

pyenv.AppendUnique(LINKFLAGS = ['@' + source.abspath])
target = str(pyenv.File("clanglite/__clanglite").srcnode()) 

pyenv.AppendUnique(LIBS = ['clanglite'])

kwargs = dict()

if operating_system == 'nt':
    kwargs['SHLIBSUFFIX'] = '.pyd'
else:
    kwargs['SHLIBSUFFIX'] = '.so'

kwargs['SHLIBPREFIX'] = ''

screen = open('/dev/tty', 'w')
count = 0
def progress_function(node)
    count += 1
    screen.write('[' + str(int(count/float(len(targets) + 1) * 100)) + '\%] ')

Progress(progress_function)

if operating_system == "posix":
    pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])


if pyenv['compiler'] == 'msvc' and '8.0' in pyenv['MSVS_VERSION']:
    kwargs['SHLINKCOM'] = [pyenv['SHLINKCOM'],
    'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']

#if len(targets) > 0:
if operating_system == 'nt':
    # Fix bug with Scons 0.97, Solved in newer versions.
    wrap = pyenv.SharedLibrary(target, [], **kwargs)
elif platform == 'darwin':
    wrap = pyenv.LoadableModule(target, [], LDMODULESUFFIX='.so',
        FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress', **kwargs)
else:
    wrap = pyenv.LoadableModule(target, [], **kwargs)
    
pyenv.Depends(wrap, targets)

Alias("py", wrap)
Alias("build", wrap)
