# # -*-python-*-

# import os
# -*-python-*-

import os

Import("env")
#env = env.Clone()#tools = ['boost_python'],
#                  #LIBS  = ['clanglite'])
env.PrependUnique(LIBS = ['clanglite'])

exclude = """
""".split()

sources = [source for source in env.Glob('*.*') if source.name not in exclude]

targets = env.BuildBoostPython("clanglite/__clanglite", sources)
Alias("py", targets)
Alias("build", targets)

# egg = pyenv.SetuptoolsInstallEgg(None,
#                                  pyenv.File("../../setup.py"))
# Alias("py", egg)
# Alias("build", egg)

# import sys
# import itertools
# from distutils import sysconfig

# Import("env")

# pyenv = env.Clone()

# from distutils import sysconfig
# if sysconfig.get_python_inc():
#   pyinc = sysconfig.get_python_inc()
#   pyenv.AppendUnique(CPPPATH=[pyinc])
# if env['SYSTEM'] is 'windows':
#   pyenv.AppendUnique(LIBS = ['boost_python',
#                            'python' + sysconfig.get_python_version().replace('.','')])
# else:
#   pyenv.AppendUnique(LIBS = ['boost_python',
#                            pyinc.split(os.sep)[-1]])
#   pyenv.AppendUnique(LIBPATH=[sysconfig.get_config_var('LIBDIR')])
# pyenv.AppendUnique(CPPDEFINES = ['BOOST_PYTHON_DYNAMIC_LIB', 'BOOST_ALL_NO_LIB'])

# operating_system = os.name.lower()
# platform = sys.platform.lower()

# if pyenv['SYSTEM'] is 'linux':
#     header = pyenv.Glob('*.h')
#     if len(header) == 1:
#         cmd = pyenv.Command(header[0].target_from_source('', '.h.gch'), header, '$CXX -o $TARGET -x c++-header -c -fPIC $SHCXXFLAGS $_CCCOMCOM $SOURCE')
#         #pyenv.AppendUnique(CXXFLAGS = ['-include' + header[0].target_from_source('', '.h').abspath ])

# targets = list(itertools.chain(*[pyenv.SharedObject(None, source) for source in pyenv.Glob('*.cpp')]))
# if pyenv['SYSTEM'] is 'linux' and len(header) == 1:
#     pyenv.Depends(targets, cmd)

# source = pyenv.File('response_file.rsp')
# with open(source.abspath, 'w') as filehandler:
#     filehandler.write(' '.join(target.abspath.replace('\\','/') + ' ' for target in targets))

# pyenv.AppendUnique(LINKFLAGS = ['@' + source.abspath])
# target = str(pyenv.File("clanglite/__clanglite").srcnode()) 

# pyenv.AppendUnique(LIBS = ['clanglite'])

# kwargs = dict()

# if operating_system == 'nt':
#     kwargs['SHLIBSUFFIX'] = '.pyd'
# else:
#     kwargs['SHLIBSUFFIX'] = '.so'

# kwargs['SHLIBPREFIX'] = ''

# # if operating_system == "posix":
# #     pyenv.AppendUnique(CXXFLAGS = ['-ftemplate-depth-100'])


# # if pyenv['compiler'] == 'msvc' and '8.0' in pyenv['MSVS_VERSION']:
# #     kwargs['SHLINKCOM'] = [pyenv['SHLINKCOM'],
# #     'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2']

# if operating_system == 'nt':
#     wrap = pyenv.SharedLibrary(target, [], **kwargs)
# elif platform == 'darwin':
#     wrap = pyenv.LoadableModule(target, [], LDMODULESUFFIX='.so',
#         FRAMEWORKSFLAGS = '-flat_namespace -undefined suppress', **kwargs)
# else:
#     wrap = pyenv.LoadableModule(target, [], **kwargs)
    
# pyenv.Depends(wrap, targets)

# Alias("py", wrap)
# Alias("build", wrap)
